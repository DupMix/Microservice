{"version":3,"sources":["../../src/spotify/auth.js"],"names":["process","env","SPOTIFY_CLIENT_ID","SPOTIFY_CLIENT_SECRET","combineQueryParams","params","parameters","Object","keys","query","map","parameter","join","constructAuthURI","redirect","root","client_id","scope","response_type","redirect_uri","requestAccessToken","code","client","grant_type","method","headers","Authorization","body","then","response","ok","text","JSON","parse","tokens","console","log","error","access_token","refresh_token","getRefreshedAuth","databaseTokens"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch'\nimport btoa from 'btoa'\nimport { saveTokensToFirebase, getTokensFromFirebase } from '../firebase'\nimport { updateLocalTokens, databaseTokensChanged } from '../server'\n\nconst { SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET } = process.env\n\nconst combineQueryParams = (params) => {\n  // might better live in index\n  const parameters = Object.keys(params)\n  const query = parameters.map((parameter) => `${parameter}=${params[parameter]}`).join(`&`)\n  return query\n}\n\nexport const constructAuthURI = async (redirect) => {\n  const root = `https://accounts.spotify.com/authorize?`\n  const params = {\n    client_id: SPOTIFY_CLIENT_ID,\n    scope: [\n      'user-read-email',\n      'user-read-private',\n      'playlist-modify-private',\n      'user-read-private',\n      'playlist-modify-public',\n    ].join(' '),\n    response_type: 'code',\n    redirect_uri: redirect,\n  }\n  return root + combineQueryParams(params)\n}\n\nexport const requestAccessToken = (code, redirect) => {\n  const client = btoa(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`)\n  const params = {\n    client_id: SPOTIFY_CLIENT_ID,\n    grant_type: 'authorization_code',\n    code: code,\n    redirect_uri: redirect,\n  }\n\n  return fetch(`https://accounts.spotify.com/api/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${client}`,\n    },\n    body: combineQueryParams(params),\n  })\n  .then((response) => {\n    if (response.ok) {\n      return response\n        .text()\n        .then((text) => JSON.parse(text))\n        .then((tokens) => {\n          console.log('Successful authentication')\n          saveTokensToFirebase(tokens)\n          return { ...tokens, error: '' }\n        })\n    } else {\n      response.text().then((text) => {\n        return { error: text, access_token: '', refresh_token: '' }\n      })\n    }\n  })\n}\n\nexport const getRefreshedAuth = async () => {\n  console.log('spinning the wax')\n  try { \n    const databaseTokens = await getTokensFromFirebase()\n    if (await databaseTokensChanged()) {\n      console.log('tokens changed')\n      updateLocalTokens(databaseTokens)\n      return databaseTokens\n    }\n  \n    const params = {\n      grant_type: 'refresh_token',\n      refresh_token: databaseTokens.refresh_token,\n      client_id: SPOTIFY_CLIENT_ID,\n    }\n  \n    const client = btoa(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`)\n  \n    return fetch(`https://accounts.spotify.com/api/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${client}`,\n      },\n      body: combineQueryParams(params),\n    })\n      .then((response) => {\n        if (response.ok) {\n          console.log('Successfully refreshed the token')\n  \n          return response\n            .text()\n            .then((text) => JSON.parse(text))\n            .then((tokens) => {\n              updateLocalTokens({\n                access_token: tokens.access_token, refresh_token: databaseTokens.refresh_token\n              })\n              saveTokensToFirebase(tokens, databaseTokens.refresh_token)\n              return tokens\n            })\n            .catch(error => ({ error: error, refresh_token: '', access_token: '' }))\n        } else {\n          return response\n            .text()\n            .then((text) => ({ error: text, refresh_token: '', access_token: '' }))\n        }\n      })\n      .catch((error) => console.error(error))\n  } catch (error) {\n    console.error(error)\n  }\n}\n"],"file":"auth.js"}