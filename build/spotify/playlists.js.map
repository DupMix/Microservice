{"version":3,"sources":["../../src/spotify/playlists.js"],"names":["getName","Math","trunc","random","data","text","names","JSON","parse","join","console","error","makePlaylist","access_token","date","name","method","headers","Authorization","body","stringify","description","ok","then","id","getPlaylist","playlist_id","response","submitToPlaylist","submission_uri","uris"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch'\nimport { format } from 'date-fns'\nimport { savePlaylistToFirebase, getPlaylistsFromFirebase } from '../firebase'\n\nconst getName = async () => {\n  try {\n    const data = await fetch(`https://random-word-api.herokuapp.com/word?number=${Math.trunc(Math.random() * (4 - 2) + 2)}&swear=0`)\n    const text = await data.text()\n    const names = JSON.parse(text)\n    return names.join(' ')\n  } catch (error) {\n    console.error(error)\n    return 'J. Doe'\n  }\n}\n\n// const getTheme = async () => {\n//   try {\n//     const data = await fetch (`https://api.quotable.io/random`)  \n//     console.log(data)\n//     return data.content\n//   } catch (error) {\n//     console.error(error)\n//     return 'Error generating theme'\n//   }\n// }\n\nexport const makePlaylist = async (access_token, date) => {\n  const name = await getName()\n  try {\n    const data = await fetch('https://api.spotify.com/v1/users/e7ermk7v6qi3y0mbqibh5do2k/playlists', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n        'content-type': 'application/json', // this was .json for a second and didn't have issues?\n      },\n      body: JSON.stringify({\n        name: name,\n        description: 'test theme'\n      }),\n    })\n    return data.ok && data.text().then(text => JSON.parse(text)).then(data => {\n      savePlaylistToFirebase(data.id, data.name, date)\n      return data.id\n    })\n  } catch (error) {\n    console.error('make-playlist-error', error)\n  }\n}\n\nexport const getPlaylist = (access_token, playlist_id) => {\n  return fetch(`https://api.spotify.com/v1/playlists/${playlist_id}`, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n      'content-type': 'application/json', // this was .json for a second and didn't have issues?\n    },\n  })\n    .then((response) => response)\n    .catch((error) => console.error(error))\n}\n\nexport const submitToPlaylist = async (access_token, { playlist_id, submission_uri }) => {\n  try {\n    return await fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${access_token}`\n      },\n      body: JSON.stringify({uris: [submission_uri]})\n    })\n  } catch (error) {\n    console.error('submit-to-spotify-playlist:', error)\n  }\n}\n\n// determine last weeks playlist\n  // get all playlists \n  // sort and find the most recent one that's over a week old\n\n// addSongs to this weeks playlist\n  // get all playlists\n"],"file":"playlists.js"}