{"version":3,"sources":["../../src/spotify/index.js"],"names":["useSpotify","spotifyAction","query","access_token","status","new_error","error","console","performAuthorizedSpotifyAction","res","then","response","ok","log","text","send","set","new_Access","secondResponse","JSON","parse","searchSpotify","accessSpotify","bearer","method","headers","Authorization"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch'\nimport { getRefreshedAuth } from './auth'\nimport { checkTokens } from '../server'\n\nexport const useSpotify = async (spotifyAction, query) => {\n  const { access_token } = await checkTokens()\n  try {\n    return await spotifyAction(access_token, query)\n  } catch (error) {\n    const { access_token, error: new_error } = error.status === 401 && await getRefreshedAuth()\n    return access_token ? spotifyAction(access_token, query) : console.error(new_error)\n  }\n}\n\nconst performAuthorizedSpotifyAction = async (spotifyAction, query, res) => {\n  // this should get deprecated\n  const { access_token } = await checkTokens()\n \n  return spotifyAction(access_token, query).then((response) => {\n    if (response?.ok) {\n      console.log('Successfully completed Spotify action')\n      return response\n        .text()\n        .then((text) => {\n          res && res.send(text).set('Access-Control-Allow-Origin', '*')\n          return(text)\n        })\n        .catch((error) => console.error(error))\n    } else if (response.status === 401) {\n      return getRefreshedAuth().then(({ access_token: new_Access, error }) => {\n        if (new_Access) {\n          console.log('Refreshed Authentication')\n          return spotifyAction(new_Access, query).then((secondResponse) => {\n            console.log('Rerunning the spotify task...')\n            if (secondResponse.ok) {\n              secondResponse\n                .text()\n                .then((text) => {\n                  res.send(text).set('Access-Control-Allow-Origin', '*')\n                  return(text)\n                })\n                .catch((error) => console.error(error))\n              return secondResponse\n            } else {\n              console.error('Something went wrong the second time we attempted the Spotify action')\n              secondResponse\n                .text()\n                .then((text) => console.error(JSON.parse(text)))\n                .catch((error) => console.error(error))\n              return secondResponse\n            }\n          })\n        } else {\n          console.error(error)\n        }\n      })\n    } else {\n      response\n        .text()\n        .then((text) => console.error(JSON.parse(text)))\n        .catch((error) => console.error(error))\n      return response\n    }\n  }).catch(error => console.error(error))\n}\n\nexport const searchSpotify = (accessSpotify, query) => {\n  const bearer = `Bearer ${accessSpotify}`\n  return fetch(`https://api.spotify.com/v1/search?q=${query}&type=track`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: bearer,\n    },\n  }).then((response) => {\n    return response\n  })\n}\n\nexport { getRefreshedAuth, constructAuthURI, requestAccessToken } from './auth'\nexport { makePlaylist, getPlaylist, submitToPlaylist } from './playlists'\nexport default performAuthorizedSpotifyAction\n"],"file":"index.js"}