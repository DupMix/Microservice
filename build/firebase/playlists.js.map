{"version":3,"sources":["../../src/firebase/playlists.js"],"names":["savePlaylistToFirebase","id","name","date","playlists","admin","database","ref","newPlaylist","push","set","spotify_playlist_id","theme","updated_at","Date","created_at","error","console","getPlaylistsFromFirebase","child","get","snapshot","exists","val","getLastWeeksPlaylistDynamically","today","parsedDate","twoSundaysAgo","days","Object","values","find","made","message","getThisWeeksPlaylistDynamically","forSubmission","lastSunday","lastSaturday","getAllSubmissions","checkForExistingSubmission","user","playlist_id","submissionList","submissions","playlistRelevantSubmissions","filter","some","userId","attemptSubmissionToFirebase","submission_uri","trackName","response","thisWeeksPlaylist","makePlaylist","newId","status","send","playlist","saveSubmissionToFirebase","newSubmission"],"mappings":"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","sourcesContent":["import admin from './admin'\nimport { isBefore, isAfter, sub, getDay, nextWednesday, format, parseISO } from 'date-fns'\nimport { useSpotify, makePlaylist } from '../spotify'\n\nexport const savePlaylistToFirebase = (id, name, date) => {\n  try {\n    const playlists = admin.database().ref('playlists/')\n    const newPlaylist = playlists.push()\n    newPlaylist.set({\n      spotify_playlist_id: id,\n      name,\n      theme: 'test_theme',\n      updated_at: format(parseISO(date) || new Date(), 'yyyy-MM-dd'),\n      created_at: format(parseISO(date) || new Date(), 'yyyy-MM-dd'),\n    })\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport const getPlaylistsFromFirebase = async () => {\n  try {\n    const snapshot = await admin\n      .database()\n      .ref()\n      .child('playlists')\n      .get()\n    return snapshot.exists() && snapshot.val()\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport const getLastWeeksPlaylistDynamically = async (today) => {\n  const parsedDate = parseISO(today)\n  const twoSundaysAgo = sub(parsedDate, { days: getDay(parsedDate) + 7})\n  try {\n    const playlists = Object.values(await getPlaylistsFromFirebase())\n    return playlists.find(({ created_at }) => {\n      const made = parseISO(created_at)\n      return (isBefore(made, nextWednesday(twoSundaysAgo)) && isAfter(made, twoSundaysAgo))\n    })\n  } catch (error) {\n    console.error(error.message)\n  }\n}\n\nexport const getThisWeeksPlaylistDynamically = async (today, forSubmission) => {\n  const parsedDate = parseISO(today)\n  const lastSunday = sub(parsedDate, { days: getDay(parsedDate) })\n  const lastSaturday = sub(lastSunday, { days: 1 } )\n  try {\n    const playlists = Object.values(await getPlaylistsFromFirebase())\n    return playlists.find(({ created_at }) => {\n      const made = parseISO(created_at)\n      return (\n        isAfter(made, forSubmission ? lastSaturday : lastSunday) &&\n        isBefore(made, nextWednesday(lastSunday))\n      )\n    }) \n  } catch(error) {\n    console.error(error.message)\n  }\n}\n\n\nconst getAllSubmissions = async () => {\n  try {\n    const snapshot = await admin\n      .database()\n      .ref()\n      .child('submission')\n      .get()\n    return snapshot.exists() && snapshot.val()\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nconst checkForExistingSubmission = async (user, playlist_id) => {\n  try {\n    const submissionList = await getAllSubmissions()\n    const submissions = Object.values(submissionList)\n    const playlistRelevantSubmissions = submissions\n      .filter(({ spotify_playlist_id }) => spotify_playlist_id === playlist_id)\n    if (playlistRelevantSubmissions.some(({ userId }) => userId === user)) \n      return true\n    } catch (error) {\n      console.error(error)\n    }\n  }\n// submission: userId, submission_uri, created_at, spotify_playlist_id\n\nexport const attemptSubmissionToFirebase = async (userId, submission_uri, trackName, date, response) => { \n  try {\n    let newId;\n    const thisWeeksPlaylist =  await getThisWeeksPlaylistDynamically(date, true)\n    if (!thisWeeksPlaylist) {\n      newId = await useSpotify(makePlaylist, date)\n    } else {\n      const exists = await checkForExistingSubmission(userId, thisWeeksPlaylist?.spotify_playlist_id)\n      if (exists) return response.status(429).send()\n    }\n      const playlist = thisWeeksPlaylist ? thisWeeksPlaylist.spotify_playlist_id : newId\n      await saveSubmissionToFirebase(playlist, userId, submission_uri, trackName, date)\n      return playlist\n  } catch (error) {\n    console.error('firebase-submission-error:', error)\n  }\n}\n\nexport const saveSubmissionToFirebase = async (spotify_playlist_id, userId, submission_uri, trackName, date) => {\n  try {\n    const newSubmission = await admin.database().ref('submission/').push()\n    newSubmission.set({\n      spotify_playlist_id,\n      userId,\n      trackName,\n      submission_uri,\n      created_at: format(parseISO(date), 'yyyy-MM-dd'),\n    })\n  } catch (error) {\n    console.error(error)\n  }\n}"],"file":"playlists.js"}