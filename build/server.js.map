{"version":3,"sources":["../src/server.js"],"names":["require","config","app","use","express","json","locals","access_token","refresh_token","port","process","env","PORT","baseUrl","NODE_ENV","updateLocalTokens","databaseTokensChanged","databaseTokens","get","request","response","send","set","authUri","redirect","code","query","tokens","post","checkIfAuthenticated","console","log","body","searchSpotify","date","status","playlist","getPlaylist","spotify_playlist_id","error","user_id","submission_uri","trackName","playlist_id","submitToPlaylist","votes","checkTokens","listen"],"mappings":"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","sourcesContent":["import express from 'express'\nimport cors from 'cors'\nimport { getDay, parseISO } from 'date-fns'\nimport { checkIfAuthenticated } from './users'\nimport performAuthorizedSpotifyAction, { \n  useSpotify,\n  constructAuthURI, \n  requestAccessToken, \n  searchSpotify, \n  getPlaylist,\n  submitToPlaylist\n} from './spotify'\nimport { \n  saveTokensToFirebase, \n  getTokensFromFirebase, \n  getLastWeeksPlaylistDynamically,\n  getThisWeeksPlaylistDynamically, \n  attemptSubmissionToFirebase,\n  userVotedThisWeek,\n  submitVotesToFirebase\n} from './firebase'\nrequire('dotenv').config()\n\nconst app = express()\napp.use(cors())\napp.use(express.json())\n\napp.locals = {\n  access_token: '',\n  refresh_token: '',\n}\n\nconst port = process.env.PORT || 8000\n\nconst baseUrl =\n  process.env.NODE_ENV === 'developement'\n    ? 'https://mixdup-microservice.herokuapp.com/'\n    : 'http://localhost:8000'\n\nexport const updateLocalTokens = ({ access_token, refresh_token }) => {\n  app.locals.access_token = access_token\n  app.locals.refresh_token = refresh_token\n}\n\nexport const databaseTokensChanged = async () => {\n  const databaseTokens = await getTokensFromFirebase()\n  return app.locals.access_token !== databaseTokens.access_token\n}\n\napp.get('/', async (request, response) => {\n  if (app.locals.access_token) {\n    response\n      .send(`Welcome to Mixdup. ${app.locals.access_token && 'I am powered by Spotify.'}`)\n      .set('Access-Control-Allow-Origin', '*')\n  } else {\n    const authUri = await constructAuthURI(`${baseUrl}/authorize`)\n    return authUri ? response.redirect(authUri) : response.send('something went wrong').set('Access-Control-Allow-Origin', '*')\n  }\n})\n\napp.get('/authorize', async (request, response) => {\n  const code = request.query.code\n  const tokens = await requestAccessToken(code, `${baseUrl}/authorize`)\n  if (tokens && tokens.access_token && tokens.refresh_token) {\n    updateLocalTokens(tokens)\n    saveTokensToFirebase(tokens)\n    response.redirect(baseUrl)\n  } else {\n    response.redirect(baseUrl) // would be nice if there was some handling\n  }\n})\n\napp.post('/search-spotify', checkIfAuthenticated, (request, response) => {\n  console.log('searching...')\n  const { query } = request.body\n  return performAuthorizedSpotifyAction(searchSpotify, query, response)\n})\n\napp.post('/contest-playlist', async (request, response) => {\n  const { date } = request.body\n  if (!date) response\n    .status(403)\n    .json('You must provide a date to get a playlist')\n    .set('Access-Control-Allow-Origin', '*')\n  try {\n    const playlist = getDay(parseISO(date)) >= 3 ? await getThisWeeksPlaylistDynamically(date) : await getLastWeeksPlaylistDynamically(date)\n    playlist\n      ? performAuthorizedSpotifyAction(getPlaylist, playlist.spotify_playlist_id, response)\n      : response.status(404).set('Access-Control-Allow-Origin', '*')\n  } catch (error) {\n    console.error(error)\n    response\n      .status(error.status || 500)\n      .json({ error })\n      .set('Access-Control-Allow-Origin', '*')\n  }\n})\n\napp.post('/submit-song', checkIfAuthenticated, async (request, response) => {\n  try {\n    const {user_id, submission_uri, trackName, date} = request.body\n    const playlist_id = await attemptSubmissionToFirebase(user_id, submission_uri, trackName, date, response)\n    playlist_id && await useSpotify(submitToPlaylist, { playlist_id, submission_uri })\n    response.status(200).set('Access-Control-Allow-Origin', '*').send()\n  } catch (error) {\n    console.error('submit-song-endpoint:', error)\n  }\n})\n\napp.post('/submit-votes', checkIfAuthenticated, async (request, response) => {\n  try {\n    const { user_id, votes, date } = request.body\n    if (await userVotedThisWeek(user_id, date)) return response.status(429).set('Access-Control-Allow-Origin', '*').send()\n    submitVotesToFirebase(user_id, votes, date)\n    response.status(201).set('Access-Control-Allow-Origin', '*').send()\n  } catch (error) {\n    console.error(error)\n    response\n      .status(error.status || 500)\n      .json({ error })\n      .set('Access-Control-Allow-Origin', '*')\n  }\n})\n\nexport const checkTokens = async () => {\n  console.log('Checking for Spotify tokens')\n  if (app.locals.access_token !== '' && app.locals.refresh_token !== '') {\n    console.log('Found local tokens')\n    return { access_token: app.locals.access_token }\n  }\n  const tokens = await getTokensFromFirebase()\n  if (tokens?.access_token && tokens?.refresh_token) {\n    console.log('Tokens retrieved from the database')\n    updateLocalTokens(tokens)\n    return tokens.access_token\n  } else {\n    console.error('The server needs to be authorized for Spotify.')\n  }\n}\n\napp.listen(port, async () => {\n  console.log(`The Mixdup server is running on http://localhost:${port}`)  \n  checkTokens()\n})"],"file":"server.js"}